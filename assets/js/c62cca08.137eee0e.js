"use strict";(self.webpackChunkmy_docs=self.webpackChunkmy_docs||[]).push([[5425],{579:(e,n,i)=>{i.r(n),i.d(n,{assets:()=>l,contentTitle:()=>o,default:()=>h,frontMatter:()=>a,metadata:()=>t,toc:()=>c});const t=JSON.parse('{"id":"Patterns/ptr-001-Saga","title":"Design Pattern: SAGA","description":"Summary","source":"@site/../docs/Patterns/ptr-001-Saga.md","sourceDirName":"Patterns","slug":"/Patterns/ptr-001-Saga","permalink":"/engineer-portal-docs/docs/Patterns/ptr-001-Saga","draft":false,"unlisted":false,"editUrl":"https://github.com/jcmunuera/engineer-portal-docs/edit/main/../docs/Patterns/ptr-001-Saga.md","tags":[{"inline":true,"label":"Microservices","permalink":"/engineer-portal-docs/docs/tags/microservices"},{"inline":true,"label":"SAGA","permalink":"/engineer-portal-docs/docs/tags/saga"},{"inline":true,"label":"Transaction","permalink":"/engineer-portal-docs/docs/tags/transaction"}],"version":"current","frontMatter":{"id":"ptr-001-Saga","title":"Design Pattern: SAGA","sidebar_label":"PTR-001: SAGA Pattern","date":"2025-05-29T00:00:00.000Z","status":"proposed","author":"Fusion Architecture Team","tags":["Microservices","SAGA","Transaction"]},"sidebar":"docSidebar","previous":{"title":"ERI-001: Transactional Mngmt","permalink":"/engineer-portal-docs/docs/ERIs/eri-001-Transactional-Management"},"next":{"title":"FRM-001: Fusion Microservices Java","permalink":"/engineer-portal-docs/docs/Frameworks/frm-001-Fusion-MSA-Java"}}');var s=i(4848),r=i(8453);const a={id:"ptr-001-Saga",title:"Design Pattern: SAGA",sidebar_label:"PTR-001: SAGA Pattern",date:new Date("2025-05-29T00:00:00.000Z"),status:"proposed",author:"Fusion Architecture Team",tags:["Microservices","SAGA","Transaction"]},o=void 0,l={},c=[{value:"Summary",id:"summary",level:2},{value:"Diagram",id:"diagram",level:2},{value:"Context",id:"context",level:2},{value:"Solution",id:"solution",level:2},{value:"Variants",id:"variants",level:2},{value:"Consequences",id:"consequences",level:2},{value:"Positive",id:"positive",level:3},{value:"Negative",id:"negative",level:3},{value:"Mitigations",id:"mitigations",level:3},{value:"Implementation",id:"implementation",level:2},{value:"Example",id:"example",level:2},{value:"Additional Notes",id:"additional-notes",level:2},{value:"References",id:"references",level:2}];function d(e){const n={a:"a",em:"em",h2:"h2",h3:"h3",li:"li",mermaid:"mermaid",ol:"ol",p:"p",strong:"strong",ul:"ul",...(0,r.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(n.h2,{id:"summary",children:"Summary"}),"\n",(0,s.jsxs)(n.p,{children:["The ",(0,s.jsx)(n.strong,{children:"SAGA"})," pattern is a strategy for managing distributed transactions within microservices architectures, where the involved operations cannot be encapsulated within a single ACID transaction. Instead, the overall operation is divided into a sequence of local transactions, each with a corresponding compensation step to revert changes in case of failure."]}),"\n",(0,s.jsx)(n.h2,{id:"diagram",children:"Diagram"}),"\n",(0,s.jsx)(n.mermaid,{value:"sequenceDiagram\n    participant C as Client\n    participant O as Order Service\n    participant I as Inventory Service\n    participant P as Payment Service\n    C->>O: Create Order\n    O->>I: Reserve Inventory\n    I--\x3e>O: Inventory Reserved\n    O->>P: Process Payment\n    P--\x3e>O: Payment Failed\n    O->>I: Cancel Inventory Reservation\n    I--\x3e>O: Reservation Cancelled\n    O--\x3e>C: Order Cancelled"}),"\n",(0,s.jsx)(n.h2,{id:"context",children:"Context"}),"\n",(0,s.jsxs)(n.p,{children:["The ",(0,s.jsx)(n.strong,{children:"SAGA"})," pattern is suitable in environments where:"]}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"Operations span multiple microservices."}),"\n",(0,s.jsx)(n.li,{children:"Strict ACID transactions are impractical due to performance and scalability constraints."}),"\n",(0,s.jsx)(n.li,{children:"Eventual consistency is acceptable, mediated via compensating actions."}),"\n",(0,s.jsx)(n.li,{children:"High resilience and fault tolerance are required, allowing services to continue operating despite partial failures."}),"\n"]}),"\n",(0,s.jsx)(n.h2,{id:"solution",children:"Solution"}),"\n",(0,s.jsxs)(n.p,{children:["The ",(0,s.jsx)(n.strong,{children:"SAGA"})," pattern involves dividing a complex operation into multiple transactional steps, coordinated either via:"]}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Orchestration"}),": A central coordinator (orchestrator) manages each step, determining the flow, handling errors, and executing compensations if needed."]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Choreography"}),": Services communicate through events, engaging in a collaborative process where each service executes its step and publishes relevant events to trigger subsequent steps, including compensations if errors occur."]}),"\n"]}),"\n",(0,s.jsx)(n.p,{children:"In both approaches, each step has an associated compensation action to revert the changes made in case of failure, aiming to restore consistency."}),"\n",(0,s.jsx)(n.h2,{id:"variants",children:"Variants"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Orchestrated Saga"}),": Centralized control with a dedicated orchestrator that dictates the sequence of steps."]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Choreographed Saga"}),": Decentralized, relying on event-driven communication among services."]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Hybrid Approach"}),": Combining orchestration and choreography for different parts of the process depending on requirements."]}),"\n"]}),"\n",(0,s.jsx)(n.h2,{id:"consequences",children:"Consequences"}),"\n",(0,s.jsx)(n.h3,{id:"positive",children:"Positive"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"High scalability and system availability."}),"\n",(0,s.jsx)(n.li,{children:"No need for distributed locking or coordination."}),"\n",(0,s.jsx)(n.li,{children:"Facilitates complex distributed data consistency."}),"\n",(0,s.jsx)(n.li,{children:"Supports recovery from failures using compensation actions."}),"\n"]}),"\n",(0,s.jsx)(n.h3,{id:"negative",children:"Negative"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"Increased design and implementation complexity."}),"\n",(0,s.jsx)(n.li,{children:"Challenges in ensuring consistency during prolonged failures."}),"\n",(0,s.jsx)(n.li,{children:"Latency overhead due to multiple steps and compensations."}),"\n",(0,s.jsx)(n.li,{children:"Complex compensation logic that must be carefully designed and tested."}),"\n"]}),"\n",(0,s.jsx)(n.h3,{id:"mitigations",children:"Mitigations"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"Design idempotent operations for all steps and compensations."}),"\n",(0,s.jsx)(n.li,{children:"Use reliable messaging systems with at-least-once delivery guarantees."}),"\n",(0,s.jsx)(n.li,{children:"Implement comprehensive monitoring and tracing for rapid failure detection."}),"\n",(0,s.jsx)(n.li,{children:"Conduct thorough testing, including chaos engineering simulations to validate recovery procedures."}),"\n"]}),"\n",(0,s.jsx)(n.h2,{id:"implementation",children:"Implementation"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"Clearly define each transactional step and its corresponding compensation."}),"\n",(0,s.jsx)(n.li,{children:"Choose between orchestration and choreography based on process complexity."}),"\n",(0,s.jsx)(n.li,{children:"Use reliable messaging and eventing platforms (e.g., Kafka, RabbitMQ)."}),"\n",(0,s.jsx)(n.li,{children:"Automate retries, dead-letter handling, and error notifications."}),"\n",(0,s.jsx)(n.li,{children:"Document flow diagrams, state machines, and compensation logic explicitly."}),"\n"]}),"\n",(0,s.jsx)(n.h2,{id:"example",children:"Example"}),"\n",(0,s.jsx)(n.p,{children:"Consider an e-commerce order process involving:"}),"\n",(0,s.jsxs)(n.ol,{children:["\n",(0,s.jsx)(n.li,{children:"Reserving inventory in the inventory service."}),"\n",(0,s.jsx)(n.li,{children:"Creating an order record in the order management system."}),"\n",(0,s.jsx)(n.li,{children:"Processing payment."}),"\n"]}),"\n",(0,s.jsx)(n.p,{children:"If payment fails, the compensating actions would be:"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"Release the inventory reservation."}),"\n",(0,s.jsx)(n.li,{children:"Cancel the order."}),"\n"]}),"\n",(0,s.jsx)(n.p,{children:"Steps are executed sequentially, with compensations triggered on failure, ensuring no partial updates remain."}),"\n",(0,s.jsx)(n.h2,{id:"additional-notes",children:"Additional Notes"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"Clearly define success and failure conditions for each step."}),"\n",(0,s.jsx)(n.li,{children:"Make compensation actions as simple and reliable as possible."}),"\n",(0,s.jsx)(n.li,{children:"Adapt whether to orchestrate or choreograph based on process complexity and operational needs."}),"\n"]}),"\n",(0,s.jsx)(n.h2,{id:"references",children:"References"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:(0,s.jsx)(n.a,{href:"https://microservices.io/patterns/data/saga.html",children:"Implementing the Saga Pattern"})}),"\n",(0,s.jsxs)(n.li,{children:["Vogels, W. (2015). ",(0,s.jsx)(n.em,{children:"Designing Data-Intensive Applications"}),". O'Reilly Media."]}),"\n"]})]})}function h(e={}){const{wrapper:n}={...(0,r.R)(),...e.components};return n?(0,s.jsx)(n,{...e,children:(0,s.jsx)(d,{...e})}):d(e)}},8453:(e,n,i)=>{i.d(n,{R:()=>a,x:()=>o});var t=i(6540);const s={},r=t.createContext(s);function a(e){const n=t.useContext(r);return t.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function o(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:a(e.components),t.createElement(r.Provider,{value:n},e.children)}}}]);